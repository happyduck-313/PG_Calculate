import tkinter as tk
from tkinter import ttk
import platform

# 定义表达式类型
expression_map = {
    "□+□+□": lambda a, b, c, d=None: a + b + c,
    "□−□+□": lambda a, b, c, d=None: a - b + c,
    "□×□+□": lambda a, b, c, d=None: a * b + c,
    "□×□−□": lambda a, b, c, d=None: a * b - c,
    "□×□×□": lambda a, b, c, d=None: a * b * c,
    "□+□+□+□": lambda a, b, c, d: a + b + c + d,
    "□+□+□−□": lambda a, b, c, d: a + b + c - d,
    "□×□+□+□": lambda a, b, c, d: a * b + c + d,
    "□×□+□−□": lambda a, b, c, d: a * b + c - d,
    "□×□×□+□": lambda a, b, c, d: a * b * c + d,
    "□×□×□−□": lambda a, b, c, d: a * b * c - d,
}

# 跨平台字体适配
if platform.system() == "Darwin":
    app_font = ("Helvetica", 16)
else:
    app_font = ("微软雅黑", 16)

# 自动生成表达式，确保每个数字只用一次
def generate_expressions():
    expr_db = []
    for a in range(1, 10):
        for b in range(1, 10):
            for c in range(1, 10):
                for d in range(1, 10):
                    for key, func in expression_map.items():
                        num_placeholders = key.count("□")
                        nums = [a, b, c, d][:num_placeholders]
                        if len(set(nums)) < num_placeholders:
                            continue
                        try:
                            result = func(a, b, c, d)
                            expr = key.replace("□", "{}").format(*nums)
                            expr_db.append((key, result, expr))
                        except:
                            continue
    return expr_db

database = generate_expressions()

def query():
    pattern = type_var.get()
    try:
        target = int(result_entry.get())
    except:
        result_var.set("请输入有效整数")
        return

    for pat, val, expr in database:
        if pat == pattern and val == target:
            result_var.set(expr.replace("*", "×").replace("-", "−"))
            return
    result_var.set("未找到匹配")

# 创建主窗口
root = tk.Tk()
root.title("计算模式选择")
root.option_add("*Font", f"{app_font[0]} {app_font[1]}")  # 全局字体设置

# 模式选择区
type_var = tk.StringVar()
tk.Label(root, text="请选择计算模式:").grid(row=0, column=0, sticky="w", columnspan=3)

row = 1
col = 0
for i, key in enumerate(expression_map.keys()):
    tk.Radiobutton(root, text=key, variable=type_var, value=key).grid(
        row=row, column=col, sticky="w", padx=5, pady=3)
    col += 1
    if col > 2:
        row += 1
        col = 0
type_var.set("□×□×□+□")  # 默认选择

# 输入与按钮
tk.Label(root, text="=").grid(row=row + 1, column=0, sticky="e")
result_entry = tk.Entry(root, font=app_font, width=10)
result_entry.grid(row=row + 1, column=1, columnspan=2, sticky="we", pady=10)

tk.Button(root, text="提交", command=query).grid(row=row + 2, column=0, columnspan=3, pady=10)

# 显示结果
result_var = tk.StringVar()
tk.Label(root, textvariable=result_var, font=(app_font[0], 20), fg="blue").grid(
    row=row + 3, column=0, columnspan=3, pady=10)

# 自动适应控件布局大小
root.update_idletasks()
root.minsize(root.winfo_reqwidth(), root.winfo_reqheight())
root.resizable(True, True)

root.mainloop()
